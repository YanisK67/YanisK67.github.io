let model;
let selectedImage = null;  // Pour √©viter les erreurs li√©es √† l'image non d√©finie
const fileInput = document.getElementById('fileInput');
const preview = document.getElementById('preview');
const analyzeBtn = document.getElementById('analyzeBtn');
const predictionText = document.getElementById('prediction');

// Cr√©er une image cach√©e pour analyse (utilis√© aussi pour la galerie)
const previewGallery = new Image();
previewGallery.crossOrigin = "anonymous"; // tr√®s important si tes images sont locales ou en ligne

// Charger le mod√®le Mobilenet
async function loadModel() {
  predictionText.textContent = "üß† Je charge mes neurones... Patience ...";
  model = await mobilenet.load();
  predictionText.textContent = "Mod√®le charg√© ‚úÖ Envoie ton image maintenant !";
}

loadModel();

// G√©rer la s√©lection d'un fichier (image) via input
if (fileInput) {
  fileInput.addEventListener('change', (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = () => {
      preview.src = reader.result;
      preview.style.display = "block"; // Afficher l'image d√®s qu'elle est charg√©e
      selectedImage = preview;
      predictionText.textContent = "Image bien re√ßue. Pr√™te √† √™tre reconnue üî•";
    };
    reader.readAsDataURL(file);
  });
}

// G√©rer le clic pour analyser l'image
if (analyzeBtn) {
  analyzeBtn.addEventListener('click', async () => {
    if (!model || !selectedImage || !selectedImage.src) {
      predictionText.textContent = "Tu veux que je devine quoi ? Charge une image üòÖ";
      return;
    }

    predictionText.textContent = "Hmm... Je r√©fl√©chis tr√®s fort ü§î";

    const predictions = await model.classify(selectedImage);
    if (predictions.length > 0) {
      // Prendre seulement la premi√®re pr√©diction (la plus probable)
      const topPrediction = predictions[0];

      const resultHTML = `
        <div class="prediction-card">
          <h3>Pr√©diction :</h3>
          <p class="class-name">${topPrediction.className}</p>
          <p class="confidence">Confiance : ${(topPrediction.probability * 100).toFixed(1)}%</p>
          <p class="comment">${getFunnyComment(topPrediction.className)}</p>
        </div>
      `;
      
      predictionText.innerHTML = resultHTML;
    } else {
      predictionText.textContent = "J‚Äôai rien trouv√© ... d√©sol√© üòÖ";
    }
  });
}

// Fonction de commentaires dr√¥les
function getFunnyComment(label) {
  const jokes = [
  "Trop facile celui-l√† üòé",
  "J'esp√®re que c‚Äôest bien √ßa sinon j‚Äôai honte üëÄ",
  "On dirait bien‚Ä¶ mais j‚Äôai vu flou üëÄ",
  "Ma pr√©diction est aussi solide qu‚Äôun caf√© ‚òïÔ∏è",
  "L‚ÄôIA a parl√©. Mais t‚Äôas le droit de ne pas √™tre d‚Äôaccord üòÖ",
  "C‚Äôest ma meilleure supposition ... ou pas üòÇ",
  "J‚Äôai analys√© √ßa plus vite que mon ombre ü§†",
  "J‚Äôai demand√© √† mes circuits, et voil√† la r√©ponse ü§ñ",
  "95% de confiance. Bon, peut-√™tre 60% üò¨",
  "M√™me moi j‚Äôen reviens pas üò≤",
  "Je parie mon processeur que j‚Äôai raison ! üß†",
  "Pas s√ªr √† 200%, mais √ßa a l‚Äôair bon üòÅ",
  "Ma boule de cristal m‚Äôa souffl√© √ßa üîÆ",
  "Un peu flou, mais √ßa ressemble √† √ßa üëì",
  "Tant que c‚Äôest pas de l'air, tout va bien üçù"
  ];
  return jokes[Math.floor(Math.random() * jokes.length)];
}

// Partie galerie : analyser une image au clic
document.addEventListener("DOMContentLoaded", () => {
  const galleryImages = document.querySelectorAll(".gallery-img");

  galleryImages.forEach(img => {
    img.addEventListener("click", () => {
      console.log("Image cliqu√©e :", img.src); // üîç debug

      // Attendre que l'image soit bien charg√©e avant de lancer l'analyse
      previewGallery.onload = () => {
        console.log("Image charg√©e, lancement de l'analyse");
        predictFromImage(previewGallery);
      };
      previewGallery.src = img.src; // Charger l'image dans l'objet `previewGallery`
    });
  });
});

// Pr√©diction √† partir d'une image
async function predictFromImage(imgElement) {
  try {
    if (!model) {
      predictionText.textContent = "‚è≥ Mod√®le non pr√™t...";
      return;
    }

    predictionText.textContent = "üîç Analyse en cours...";

    const predictions = await model.classify(imgElement);
    console.log("Pr√©dictions :", predictions); // üîç debug

    if (predictions.length > 0) {
      const top = predictions[0];
      predictionText.innerHTML = `
        <div class="mt-3">
          <h4>üîÆ ${top.className}</h4>
          <p>Confiance : ${(top.probability * 100).toFixed(1)}%</p>
          <p>${getFunnyComment(top.className)}</p>
        </div>
      `;
    } else {
      predictionText.textContent = "‚ùå Je n‚Äôai rien trouv√©‚Ä¶ essaie une autre image üòÖ";
    }
  } catch (err) {
    console.error("Erreur pendant l'analyse :", err);
    predictionText.textContent = "‚ùå Une erreur s‚Äôest produite pendant l‚Äôanalyse.";
  }
}

